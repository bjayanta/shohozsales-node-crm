// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  PAY
  RECEIVE
}

model Term {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(100)
  description     String?   @db.Text
  
  parent_id       Int?
  parent          Term?     @relation("ParentChild", fields: [parent_id], references: [id], onDelete: Cascade)
  
  subterms        Term[]    @relation("ParentChild")

  contacts        ContactsOnTerms[]
  
  texonomy        String    @db.VarChar(45)
  action_taken_by Json?
  business_id     Int?
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

  @@index([name])
  @@index([texonomy])
  @@map("terms")
}

model Division {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(25)
  bn_name         String    @db.VarChar(25)
  url             String?   @db.VarChar(50)

  districts       District[]
  contacts        Contact[]

  @@index([name])
  @@index([bn_name])

  @@map("divisions")
}

model District {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(25)
  bn_name         String    @db.VarChar(25)
  lat             String    @db.VarChar(15)
  lon             String    @db.VarChar(15)
  url             String?   @db.VarChar(50)

  division_id     Int?
  division        Division? @relation(fields: [division_id], references: [id], onDelete: Cascade)

  upazilas        Upazila[]
  contacts        Contact[]

  @@index([name])
  @@index([bn_name])

  @@map("districts")
}

model Upazila {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(25)
  bn_name         String    @db.VarChar(25)
  url             String?   @db.VarChar(50)

  district_id     Int?
  district        District? @relation(fields: [district_id], references: [id], onDelete: Cascade)

  unions          Union[]
  contacts        Contact[]

  @@index([name])
  @@index([bn_name])

  @@map("upazilas")
}

model Union {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(25)
  bn_name         String    @db.VarChar(25)
  url             String?   @db.VarChar(50)

  upazilla_id     Int?
  upazilla        Upazila? @relation(fields: [upazilla_id], references: [id], onDelete: Cascade)

  contacts        Contact[]

  @@index([name])
  @@index([bn_name])

  @@map("unions")
}

model Company {
  id              Int       @id @default(autoincrement())
  name            String    @db.VarChar(100)
  email           String?   @db.VarChar(100)
  url             String?   @db.VarChar(100)

  contacts        Contact[]

  properties      Json?     @db.Json // can add `address`, `contact details` etc
  action_taken_by Json?     @db.Json
  business_id     Int
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

  @@map("companies")
}

model Contact {
  id              Int       @id @default(autoincrement())
  first_name      String    @db.VarChar(100)
  last_name       String    @db.VarChar(100)
  date_of_birth   DateTime?
  bio             String?   @db.Text
  mobile          String    @db.VarChar(25)
  email           String?   @db.VarChar(100)

  division_id     Int?
  division        Division? @relation(fields: [division_id], references: [id])
  district_id     Int?
  district        District? @relation(fields: [district_id], references: [id])
  upazilla_id     Int?
  upazilla        Upazila?  @relation(fields: [upazilla_id], references: [id])
  union_id        Int?
  union           Union?    @relation(fields: [union_id], references: [id])
  address         String?   @db.Text
  
  parent_id       Int?
  parent          Contact?  @relation("ParentChild", fields: [parent_id], references: [id], onDelete: Cascade)
  children        Contact[] @relation("ParentChild")
  relation        String?

  initial_balance Decimal   @db.Decimal(10, 2) @default(0.00)
  current_balance Decimal   @db.Decimal(10, 2) @default(0.00)

  terms           ContactsOnTerms[]
  transactions    Transaction[]

  company_id      Int?
  company         Company? @relation(fields: [company_id], references: [id])

  properties      Json?     @db.Json // can add more `mobile number`, `address`, `social media details` etc
  action_taken_by Json?     @db.Json
  business_id     Int
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

  @@index([mobile])

  @@map("contacts")
}

model ContactsOnTerms {
  contact         Contact   @relation(fields: [contact_id], references: [id])
  contact_id      Int // relation scalar field (used in the `@relation` attribute above)

  term            Term      @relation(fields: [term_id], references: [id])
  term_id         Int // relation scalar field (used in the `@relation` attribute above)

  @@id([contact_id, term_id])

  @@map("contacts_on_terms")
}

model Transaction {
  id              Int       @id @default(autoincrement())
  amount          Decimal   @db.Decimal(10, 2) @default(0.00)
  trx_type        TransactionType
  trx_method      String    @db.VarChar(45) // Cash, Bank Transfer, Cheque, bKash etc

  contact_id      Int
  contact         Contact?  @relation(fields: [contact_id], references: [id])

  remark          String?   @db.Text
  properties      Json?     @db.Json // additional details
  action_taken_by Json?     @db.Json
  business_id     Int
  created_at      DateTime  @default(now())
  updated_at      DateTime  @updatedAt
  deleted_at      DateTime?

  @@map("transactions")
}
